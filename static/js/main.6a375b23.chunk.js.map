{"version":3,"sources":["Components/Button/Button.js","Components/Landing/Landing.js","Components/Landing/index.js","Data/Actions/actions.js","Components/Counter/Counter.js","Components/Counter/TeamCounter.js","Components/InputPlayer/InputPlayer.js","Components/InputPlayer/index.js","Components/PlayerList/PlayerList.js","Components/PlayerList/index.js","Components/InputPlayerGroup/InputPlayerGroup.js","Components/InputPlayerGroup/index.js","Components/TeamSplitter/TeamSplitter.js","Components/TeamSplitter/index.js","Components/TeamCards/TeamCards.js","Components/TeamCards/index.js","Components/Application/Application.js","Components/Application/index.js","App.js","serviceWorker.js","Data/initial.js","Data/reducer.js","index.js"],"names":["Button","handleClick","children","disabled","className","type","onClick","Landing","stage","Fragment","connect","state","dispatch","Counter","props","value","handleAdd","bind","handleMinus","handleSave","max","this","sum","setState","min","e","preventDefault","handleSubmit","handleProgress","Component","handleTeamCount","InputPlayer","name","handleChangeName","currentTarget","handleAddPlayer","onChange","placeholder","required","PlayerList","players","map","player","i","index","key","InputPlayerGroup","totalTeams","length","TeamSplitter","TeamCards","teams","Carousel","touch","interval","team","Item","Application","TeamCounter","App","Boolean","window","location","hostname","match","initial","splitTeams","arr","teamCount","newArr","array","j","Math","floor","random","temp","shuffleArray","teamSize","ceil","slice","push","splice","filter","_","reducer","action","saveTeamTotal","totalPlayers","savePlayerTotal","addPlayer","generateTeams","progressStage","resetApp","deletePlayer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a375b23.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Button = ({ \n    handleClick,\n    children,\n    disabled,\n    className,\n    type\n}) => (\n    <button \n     onClick={ handleClick }\n     disabled={ disabled ? true : null}\n     className= { className }\n     type= { type }\n    >{ children }</button> \n);\n\nexport default Button;","import React from \"react\";\nimport Button from \"../Button/Button\";\n\nconst Landing = ({ handleClick,stage }) => (\n    // this is the Landing/Homepage of the App and contains very different styling so kept separate\n    <React.Fragment>\n        { stage !== 0 ? null :\n        <div className=\"landing-container\">\n            <div className=\"bg-circle\"></div>\n            <div className=\"flex-col-centre title\">\n                <h1> TEAM UP</h1>\n                <p>Random Team Generator</p>\n            </div>\n           \n            <Button className=\"btn btn-main\" handleClick={ handleClick }>Let's Go!</Button>\n            \n        </div >\n        }\n    </React.Fragment>\n    \n);\nexport default Landing","import { connect } from 'react-redux';\nimport Landing from \"./Landing\";\nimport { handleProgress } from \"../../Data/Actions/actions\";\n\nconst mapStateToProps = state => {\n    return {\n        stage: state.stage,\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleClick: () => dispatch(handleProgress())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Landing);\n","\n\nexport const handleTeamCount = (value) => {\n    return {\n        type: \"saveTeamCount\",\n        value: +value\n    }\n}\n\nexport const handlePlayerCount = (value) => {\n    return {\n        type: \"savePlayerCount\",\n        value: +value\n    }\n}\n\nexport const handleAddPlayer = (name) => {\n    return {\n        type:\"addPlayer\",\n        name: name\n    }\n}\n\nexport const handleSplitTeam = () => {\n    return {\n        type: \"splitTeams\"\n    }\n}\n\nexport const handleProgress = () => {\n    return {\n        type: \"progressStage\"\n    }\n}\n\nexport const handleReset = () => {\n    return {\n        type: \"resetApp\"\n    }\n}\n\nexport const handleDelete = (index) => {\n    return {\n        type: \"deletePlayer\",\n        index: index,\n    }\n}","import React, { Component } from 'react';\nimport Button from '../Button/Button'\n\nclass Counter extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            value: 2,\n        };\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleMinus = this.handleMinus.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n        \n    }\n\n    handleAdd() {\n        let { max  } = this.props;\n        let { value } = this.state;\n        let sum = value + 1;\n        this.setState({\n            value: sum >= max ? max : sum\n        }); \n    }\n\n    handleMinus() {\n        let { min } = this.props;\n        let { value } = this.state;\n        let sum = value - 1;\n        this.setState({\n            value: sum <= min ? min : sum\n        });\n    \n    }\n\n    handleSave(e) {\n        \n        let { value } = this.state;\n        e.preventDefault();\n\n       this.props.handleSubmit(value);\n       this.props.handleProgress();\n\n    }\n\n\n    render() {\n        let { value } = this.state;\n        let { children, stage } = this.props;\n        return (\n        <React.Fragment>\n            { stage !== 1 ? null :\n            <div className=\"page-container\">\n                <h1 className=\"stage-title\">{ children }</h1>\n                <div className=\"counter\">\n                    <Button className=\"btn btn-small\" handleClick={ this.handleMinus }>-</Button>\n                    <p className=\"counter-value\">{ value }</p>\n                    <Button className=\"btn btn-small\" handleClick={ this.handleAdd }>+</Button>\n                </div>\n                <Button className=\"btn btn-main\" handleClick={ this.handleSave }>Next</Button>\n            </div>\n            \n            } \n        </React.Fragment>\n        );\n    }\n}\n\nexport default Counter;","import { connect } from 'react-redux';\nimport Counter from \"./Counter\";\nimport { handleTeamCount, handleProgress } from \"../../Data/Actions/actions\";\n\nconst mapStateToProps = state => {\n    return {\n        stage: state.stage,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSubmit: (value) => dispatch(handleTeamCount(value)),\n        handleProgress: () => dispatch(handleProgress()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n","import React, { Component } from 'react';\nimport Button from '../Button/Button'\n\nclass InputPlayer extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            name: \"\",\n        };\n\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this)\n      \n    }\n\n    handleChangeName(e) {\n        this.setState({\n            name: e.currentTarget.value,\n        });\n    }\n      handleSubmit(e){\n        e.preventDefault();\n\n        let { handleAddPlayer } = this.props;\n        let { name } = this.state;\n        \n        handleAddPlayer(name);\n        \n        this.setState({\n            name: \"\",\n        })\n        \n    }\n\n    render() {\n        let { name } = this.state;\n        return (\n        <div className=\"input-players\">\n            <label>Name</label>\n            <input \n                onChange={ this.handleChangeName }\n                type=\"text\" \n                placeholder=\"Enter Player Name\"\n                value = { name }\n                required >\n            </input>\n            <Button\n             disabled={ name === \"\" ? true : false }\n             handleClick={ this.handleSubmit }\n             className=\"btn btn-add\"\n             type=\"submit\"\n            >Add</Button>\n        </div>\n        );\n    }\n}\n\nexport default InputPlayer;","import { connect } from 'react-redux';\nimport InputPlayer from \"./InputPlayer\";\nimport { handleAddPlayer } from \"../../Data/Actions/actions\";\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleAddPlayer: (name) => dispatch(handleAddPlayer(name))\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(InputPlayer);\n","import React from 'react';\n\nconst PlayerList = ({ \n   players,\n   handleClick\n}) => {\n   return (\n   <div className=\"player-table\">\n      <table >\n            <thead>\n               <tr>\n                  <th>Players</th>\n               </tr>\n            </thead>\n            <tbody>\n               {players.map((player, i) => {\n                  // used to parsed the index value into the handleClick function which passes it in turn up to the redux state\n                  let index = i;\n                  const handleDeleteName =() => { \n                     handleClick(index) \n                  };\n                  return (\n                  <tr className=\"table-layout\" key={ i }>\n                     <td>{ player }</td>  \n                     <td className = \"delete-data\">\n                        <button className=\"btn-del\" onClick={ handleDeleteName }>x</button>\n                     </td>\n                  </tr>\n               )}\n               )} \n            </tbody>\n      </table>\n   </div>\n   )\n};\n\nexport default PlayerList;","import { connect } from 'react-redux';\nimport PlayerList from \"./PlayerList\";\nimport { handleDelete } from \"../../Data/Actions/actions.js\";\n\nconst mapStateToProps = ({ players }) => {\n    return {\n        players,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleClick: (i) => dispatch(handleDelete(i)),\n    };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(PlayerList);","import React from \"react\";\nimport InputPlayer from \"../InputPlayer\";\nimport PlayerList from \"../PlayerList\";\nimport Button from \"../Button/Button\";\n\n// parent component for the Player Input stage, as it is built with a number of other reuabsle components\nconst InputPlayerGroup = ({ totalTeams, players, stage, handleClick }) => (\n    <React.Fragment>\n        { stage !== 2 ? null :\n        <div className=\"page-container\">\n            <div className=\"page-content\">\n                <h1>Add Players</h1>\n            \n                <InputPlayer/>\n                <PlayerList/>\n            </div>\n            <Button \n                disabled={ players.length < totalTeams ? true : false}\n                handleClick={ handleClick }\n                className=\"btn btn-main\"\n            >Next</Button> \n        </div>\n        }\n    </React.Fragment>  \n);\n\nexport default InputPlayerGroup","import { connect } from 'react-redux';\nimport InputPlayerGroup from \"./InputPlayerGroup\";\nimport { handleProgress } from \"../../Data/Actions/actions\"\n\n\nconst mapStateToProps = state => {\n    return {\n        stage: state.stage,\n        players: state.players,\n        totalTeams: state.totalTeams,\n\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleClick: () => dispatch(handleProgress())\n    };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputPlayerGroup);\n","import React from 'react';\nimport Button from \"../../Components/Button/Button\";\n\n\nconst TeamSplitter = ({ handleSubmit, stage }) => (\n   <>\n      { stage !== 3 ? null :\n      <div className=\"page-container\">\n         <h1> Ready? </h1>\n         <Button className=\"btn-main\" handleClick = { handleSubmit }>Split</Button>\n      </div>\n      }\n      \n   </>\n);\n\nexport default TeamSplitter;","import { connect } from 'react-redux';\nimport TeamSplitter from \"./TeamSplitter\";\nimport { handleSplitTeam } from \"../../Data/Actions/actions\";\n\nconst mapStateToProps = state => {\n    return {\n        stage: state.stage,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSubmit: () => dispatch(handleSplitTeam())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSplitter);\n","import React from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\nimport Button from '../Button/Button';\n\n\n//This is the only part where i have used react bootstrap components. I copied the styling from the boostrap css file into its own sass file so that there would be no conflicts with my styling\n\nconst TeamCards = ({ teams, stage, handleClick }) => (\n    <React.Fragment>\n        { stage !== 4 ? null :\n        <div className=\"page-container\">\n            <Carousel className=\"scrolling-wrapper\" touch={ true } interval={ 0 }>\n                {teams.map((team, i) => (\n                    <Carousel.Item className=\"card\" key={ i }>\n                        <h4>Team { i + 1}</h4>\n                        <ul>\n                        {team.map((player, i) => (\n                            <li key={ i }> { player } </li>\n                        ))}\n                        </ul>\n                    </Carousel.Item>\n                \n                ))} \n            </Carousel>\n            <Button className=\"btn btn-main\" handleClick={ handleClick }>Restart</Button>\n        </div>\n        }\n    </React.Fragment>\n);\n\nexport default TeamCards;","import { connect } from 'react-redux';\nimport TeamCards from \"./TeamCards\";\nimport { handleReset } from \"../../Data/Actions/actions\";\n\n\nconst mapStateToProps = ({ stage, teams }) => {\n    return {\n        stage,\n        teams,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        handleClick: () => dispatch(handleReset())\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamCards);","import React from \"react\";\nimport TeamCounter from \"../Counter/TeamCounter\";\nimport InputPlayerGroup from \"../InputPlayerGroup\";\nimport TeamSplitter from \"../TeamSplitter\";\nimport TeamCards from \"../TeamCards\";\n\n\n\nconst Application = ({ stage }) => (\n    // Here the divs for the divs background will be found and the then components overlay on top\n    <> { stage === 0 ? null : \n        <div className=\"background-1 flex-col-centre\">\n            <div className=\"bg-circle-2 outer\"></div>\n            <div className=\"bg-circle-3 inner\"></div>\n            <TeamCounter max={ 9 } min={ 2 }>Number of Teams</TeamCounter> \n            <InputPlayerGroup/>\n            <TeamSplitter />\n            <TeamCards/>\n            <div className=\"bg-circle-4 outer\"></div>\n            <div className=\"bg-circle-5 inner \"></div>\n        </div>\n    }\n    </>\n    \n);\n\nexport default Application;","import { connect } from 'react-redux';\nimport Application from \"./Application\";\n\n\nconst mapStateToProps = ({ stage }) => {\n    return {\n        stage,\n    }\n}\n\nexport default connect(mapStateToProps)(Application);","import React from 'react';\nimport Landing from \"./Components/Landing\";\nimport Application from \"./Components/Application\";\n\nfunction App() {\n  return (\n    <>\n      {/* // separated these out due to set up of background using divs */}\n      <Landing />\n      <Application/>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initial = {\n    totalTeams: 0,\n    stage: 0,\n    players: [],\n    teams: []\n}\n\nexport default initial;","import initial from \"./initial\";\n\n\nconst saveTeamTotal = (state, { value }) => ({ ...state, totalTeams: value })\nconst savePlayerTotal = (state, { value }) => ({ ...state, totalPlayers: value })\nconst addPlayer = (state, { name }) => ({...state, players: [...state.players, name]})\n\n// This is will used to navigate through the application/components, Linked to componets to specific stages\nconst progressStage = (state) => ({...state, stage: state.stage + 1})\n\n\n// As part of the team splitting, i wanted to suffle the array randomly first so that the teams would be random\nfunction shuffleArray(array) {\n\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * i);\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n\n\n// The following function was used to split the array of players into the set number of teams with the and remainders being shared equally.\nfunction splitTeams(arr, teamCount) {\n    // first shuffle the array so that its random. \n    let newArr = shuffleArray(arr);\n    //declare the array into which the team arrays will be inserted\n    const teams = [];\n    while(newArr.length) {\n      //calculates the size of the team that is needed. this will change through the duration of the while loop if the total players isn't divisible by the number of teams. each time the teamCount will decrease by 1 until 0. at 0 the while loop stops.\n      const teamSize = Math.ceil(newArr.length / teamCount--); \n      // slice used to create a the team the first teamSize from the arr,\n      const team = newArr.slice(0, teamSize);\n      // push this arr into the teams array\n      teams.push(team);\n      // reassigning the value of newArr to the remaining values for the process to continue.\n      newArr = newArr.slice(teamSize);\n      \n    }\n    return teams;\n}\n\nconst generateTeams = (state) => ({...state, teams: (splitTeams(state.players, state.totalTeams)), stage: state.stage + 1});\n\nconst resetApp = (state) => ({...state, \n    totalTeams: initial.totalTeams,\n    totalPlayers: initial.totalPlayers,\n    stage: initial.stage,\n    players: initial.players,\n    teams: initial.teams,\n})\n\n\n// used to remove the deleted player \nconst splice = (arr, index)=> {\n        return arr.filter ((_, i) => {\n            return i !== index\n        }\n    );\n} \n\n\nconst deletePlayer = (state, { index }) => ({...state, players: splice(state.players, index)})\n\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"saveTeamCount\": return saveTeamTotal(state, action);\n        case \"savePlayerCount\": return savePlayerTotal(state, action);\n        case \"addPlayer\": return addPlayer(state,action);\n        case \"splitTeams\": return generateTeams(state);\n        case \"progressStage\": return progressStage(state);\n        case \"resetApp\": return resetApp(state);\n        case \"deletePlayer\": return deletePlayer(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// using sass in the project \nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from \"redux\";\nimport reducer from \"./Data/reducer\";\nimport initial from \"./Data/initial\";\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    reducer,\n    initial,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\n// wrap Router with Provider\nReactDOM.render(\n    <Provider store={ store }>\n      <App />\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}